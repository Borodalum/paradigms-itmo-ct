(defn s [value] (vector value))
(defn v [& args] (apply vector args))
(defn m [& args] (apply v args))

(defn createOperation [operator] (fn [& args] (apply mapv operator args)))
(defn shapesOperation [operator] (fn [& shapes]
                                     (if (vector? (first shapes))
                                           (apply mapv (partial (shapesOperation operator)) shapes)
                                           (apply operator shapes)
                                           )
                                     )
      )

(def v+ (createOperation +))
(def v- (createOperation -))
(def v* (createOperation *))
(def vd (createOperation /))
(defn scalar [& vectors] (reduce + (apply v* vectors)))
(defn det [matrix] (- (* (get-in matrix [0 0]) (get-in matrix [1 1])) (* (get-in matrix [0 1]) (get-in matrix [1 0]))))
(defn vect [vec1 vec2]
      (def gt2 (fn [vc f s] (v (get vc f) (get vc s))))
      (def fnd (fn [f s] (det (m (gt2 vec1 f s) (gt2 vec2 f s)))))
      (vector (fnd 1 2) (- (fnd 0 2)) (fnd 0 1))
      )
(defn v*s [vector sc] (mapv (partial * sc) vector))

(def m+ (createOperation v+))
(def m- (createOperation v-))
(def m* (createOperation v*))
(def md (createOperation vd))
(defn m*s [matrix sc] (mapv (fn [vector] (v*s vector sc)) matrix))
(defn m*v [matrix vc] (mapv (fn [vector] (scalar vector vc)) matrix))
(defn transpose [matrix] (apply mapv vector matrix))
(defn m*m [mat1 mat2] (mapv (fn [vc] (m*v (transpose mat2) vc)) mat1))

(def s+ (shapesOperation +))
(def s- (shapesOperation -))
(def s* (shapesOperation *))
(def sd (shapesOperation /))
